name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment (staging or production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback_version:
        description: 'Optional: Commit SHA to rollback to'
        required: false
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Changed to LTS version
        cache: 'npm' # Enable built-in npm caching
        cache-dependency-path: 'package-lock.json' # Cache key based on package-lock.json

    # Install Linux build tools for bcrypt (moved before npm install)
    - name: Install Linux build tools
      run: sudo apt-get update && sudo apt-get install -y build-essential python3

    # Removed separate actions/cache for node_modules

    # Install dependencies
    - name: Install dependencies
      run: npm install

    - name: Run ESLint
      run: npm run lint

    - name: Placeholder for tests
      run: echo "No unit/integration tests configured. Add 'npm test' here when ready."

    # Removed separate actions/cache for .next build output

    - name: Build Next.js application
      run: npm run build

    - name: List directory after build
      run: |
        ls -la
        ls -la ./.next

    - name: Create full project tarball
      run: tar -czf full-project.tar.gz .next public package.json package-lock.json next.config.ts postcss.config.mjs tailwind.config.ts

    - name: Upload full project artifact
      uses: actions/upload-artifact@v4
      with:
        name: full-project-build
        path: full-project.tar.gz
        retention-days: 7
        if-no-files-found: error

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    if: success() && github.event.inputs.rollback_version == ''

    steps:
    - name: Download full project artifact
      uses: actions/download-artifact@v4
      with:
        name: full-project-build
        path: .

    - name: Set deployment target based on environment
      id: set_target
      run: |
        if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
          echo "SSH_HOST=${{ secrets.STAGING_SSH_HOST }}" >> $GITHUB_OUTPUT
          echo "SSH_USERNAME=${{ secrets.STAGING_SSH_USERNAME }}" >> $GITHUB_OUTPUT
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_OUTPUT
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "PROJECT_DIR=/mnt/volume_sgp1_01/fb-manager/staging" >> $GITHUB_OUTPUT
          echo "PM2_APP_NAME=facebook-manager-staging" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
          echo "SSH_HOST=${{ secrets.PROD_SSH_HOST }}" >> $GITHUB_OUTPUT
          echo "SSH_USERNAME=${{ secrets.PROD_SSH_USERNAME }}" >> $GITHUB_OUTPUT
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_OUTPUT
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "PROJECT_DIR=/mnt/volume_sgp1_01/fb-manager/production" >> $GITHUB_OUTPUT
          echo "PM2_APP_NAME=facebook-manager-prod" >> $GITHUB_OUTPUT
        fi
    
    - name: Copy artifact to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ steps.set_target.outputs.SSH_HOST }}
        username: ${{ steps.set_target.outputs.SSH_USERNAME }}
        key: ${{ steps.set_target.outputs.SSH_PRIVATE_KEY }}
        source: "full-project.tar.gz"
        target: "${{ steps.set_target.outputs.PROJECT_DIR }}"

    - name: Deploy to AlmaLinux server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.set_target.outputs.SSH_HOST }}
        username: ${{ steps.set_target.outputs.SSH_USERNAME }}
        key: ${{ steps.set_target.outputs.SSH_PRIVATE_KEY }}
        script: |
          sudo mkdir -p ${{ steps.set_target.outputs.PROJECT_DIR }}
          sudo chown -R ${{ steps.set_target.outputs.SSH_USERNAME }}:${{ steps.set_target.outputs.SSH_USERNAME }} ${{ steps.set_target.outputs.PROJECT_DIR }}
          cd ${{ steps.set_target.outputs.PROJECT_DIR }}
          mkdir -p backups

          if [ -d "current" ]; then
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            sudo mv current backups/$TIMESTAMP
          fi

          mkdir current
          tar -xzf full-project.tar.gz -C current
          rm full-project.tar.gz

          cd current
          echo "Creating .env.local file..."
          cat << EOF > .env.local
          PG_HOST=${{ secrets.PG_HOST }}
          PG_PORT=${{ secrets.PG_PORT }}
          PG_USER=${{ secrets.PG_USER }}
          PG_PASSWORD=${{ secrets.PG_PASSWORD }}
          PG_DATABASE=${{ secrets.PG_DATABASE }}
          FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}
          FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET }}
          NEXT_PUBLIC_FACEBOOK_GRAPH_API_BASE_URL=${{ secrets.NEXT_PUBLIC_FACEBOOK_GRAPH_API_BASE_URL }}
          NEXT_PUBLIC_FACEBOOK_OAUTH_BASE_URL=${{ secrets.NEXT_PUBLIC_FACEBOOK_OAUTH_BASE_URL }}
          EOF

          echo "Installing dependencies..."
          npm install

          echo "Restarting PM2 process..."
          pm2 restart ${{ steps.set_target.outputs.PM2_APP_NAME }} || pm2 start npm --name "${{ steps.set_target.outputs.PM2_APP_NAME }}" -- start
          echo "Deployment complete for ${{ github.event.inputs.environment }}!"

  rollback:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    if: success() && github.event.inputs.rollback_version != ''

    steps:
    - name: Set rollback target based on environment
      id: set_rollback_target
      run: |
        if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
          echo "SSH_HOST=${{ secrets.STAGING_SSH_HOST }}" >> $GITHUB_OUTPUT
          echo "SSH_USERNAME=${{ secrets.STAGING_SSH_USERNAME }}" >> $GITHUB_OUTPUT
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_OUTPUT
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "PROJECT_DIR=/mnt/volume_sgp1_01/fb-manager/staging" >> $GITHUB_OUTPUT
          echo "PM2_APP_NAME=facebook-manager-staging" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
          echo "SSH_HOST=${{ secrets.PROD_SSH_HOST }}" >> $GITHUB_OUTPUT
          echo "SSH_USERNAME=${{ secrets.PROD_SSH_USERNAME }}" >> $GITHUB_OUTPUT
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_OUTPUT
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "PROJECT_DIR=/mnt/volume_sgp1_01/fb-manager/production" >> $GITHUB_OUTPUT
          echo "PM2_APP_NAME=facebook-manager-prod" >> $GITHUB_OUTPUT
        fi

    - name: Rollback deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.set_rollback_target.outputs.SSH_HOST }}
        username: ${{ steps.set_rollback_target.outputs.SSH_USERNAME }}
        key: ${{ steps.set_rollback_target.outputs.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ steps.set_rollback_target.outputs.PROJECT_DIR }}
          ROLLBACK_VERSION="${{ github.event.inputs.rollback_version }}"
          if [ -d "backups/$ROLLBACK_VERSION" ]; then
            TIMESTAMP_FAILED=$(date +%Y%m%d%H%M%S)_failed_rollback
            sudo mv current backups/$TIMESTAMP_FAILED
            sudo mv backups/$ROLLBACK_VERSION current
            pm2 restart ${{ steps.set_rollback_target.outputs.PM2_APP_NAME }}
            echo "Rollback to $ROLLBACK_VERSION complete!"
          else
            echo "Error: Rollback version $ROLLBACK_VERSION not found."
            exit 1
          fi
